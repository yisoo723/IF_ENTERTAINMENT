package kr.or.ddit.controller.community;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.community.ISurveyService;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.community.SurveyFormVO;
import kr.or.ddit.vo.community.SurveyQuestionVO;
import kr.or.ddit.vo.community.SurveyResultVO;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;


/**
 * 설문조사 내역 조회 컨트롤러(관리자)
 * @author 홍진영
 */
@Controller
@Slf4j
@RequestMapping("/community/survey")
public class SurveyRetrieveController {

	@Inject
	private ISurveyService surveyService;
	
	@RequestMapping(value="/list.do")
	public String surveyList(Model model,
		@RequestParam(name ="page", required = false, defaultValue = "1") int currentPage,
		@RequestParam(required = false) String searchWord
			) {
		
		PaginationInfoVO<SurveyFormVO> pagingVO = new PaginationInfoVO<SurveyFormVO>();
		
		if(StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = surveyService.selectSurveyCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<SurveyFormVO> surveyFormList = surveyService.selectSurveyList(pagingVO);
		pagingVO.setDataList(surveyFormList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "admin/community/surveyList";
	}
	
	// 설문 상세 조회 메서드
	@RequestMapping(value="/detail.do", method = RequestMethod.GET)
	public String surveyDetail(int sfNo, Model model) {
		SurveyFormVO surveyFormVO = surveyService.selectSurvey(sfNo);
		model.addAttribute("surveyFormVO", surveyFormVO);
		log.info("### surveyFormVO : {}", surveyFormVO);
		return "admin/community/surveyDetail";
	}
	
	// 설문 결과 조회 메서드
	@RequestMapping(value="/getResult", method = RequestMethod.GET)
	public ResponseEntity<List<SurveyResultVO>> getResult(int sfNo, Model model){
		log.info("설문 결과 조회를 위한 설문번호 : {}", sfNo);
		ResponseEntity<List<SurveyResultVO>> entity = null;
		
		List<SurveyResultVO> surveyResultList = surveyService.getsurveyResultList(sfNo);
		
		log.info("surveyResultList : {}", surveyResultList);
		
			/*
			 * surveyResultList에는 설문지(질문, 보기), 설문응답내용 들이 들어있다.
			 * 1. 설문지에 있는 문제당 보기들을 전역 맵에 저장하여 SurveyQuestionVO에 저장한다.
			 * 2.  
			 */
			// 보기별 키 설정
			Map<String, Integer> countMap = new HashMap<String, Integer>();
			for(int i = 0; i < surveyResultList.get(0).getQuestionList().size(); i++) {
				List<SurveyQuestionVO> sqList = surveyResultList.get(0).getQuestionList();
				
				for(int j = 0; i < sqList.get(i).getOptionList().size(); i++) {
					String key = sqList.get(i).getOptionList().get(j).getSoContent();
					countMap.put(key, 0);
				}
			}
			
			
			for (SurveyResultVO surveyResultVO : surveyResultList) {
				
				surveyResultVO.getQuestionList().get(0).getOptionList();
				List<String> answerList = surveyResultVO.getAnswerList();
				
				for (String answer : answerList) {
					log.info("### answer : {}", answer);
					String[] selectedOptions = answer.split(",");
					for (String selectedOption : selectedOptions) {
						
						if(!countMap.containsKey(selectedOption)) {
							countMap.put(selectedOption, 1);
						} else {
							countMap.put(selectedOption, countMap.get(selectedOption) + 1);
						}
					}
				}
				log.info("#### countMap : {}", countMap);
			}
			
//			for (SurveyResultVO surveyResultVO : surveyResultList) {
//				
//				surveyResultVO.getQuestionList().get(0).getOptionList();
//				List<String> answerList = surveyResultVO.getAnswerList();
//				
//				for (String answer : answerList) {
//					log.info("### answer : {}", answer);
//					String[] selectedOptions = answer.split(",");
//					for (String selectedOption : selectedOptions) {
//						
//						if(!countMap.containsKey(selectedOption)) {
//							countMap.put(selectedOption, 1);
//						} else {
//							countMap.put(selectedOption, countMap.get(selectedOption) + 1);
//						}
//					}
//				}
//				log.info("#### countMap : {}", countMap);
//			}
			
			model.addAttribute("surveyResultList", surveyResultList);
			entity = new ResponseEntity<List<SurveyResultVO>>(surveyResultList, HttpStatus.OK);
		return entity;
	}
	
}
