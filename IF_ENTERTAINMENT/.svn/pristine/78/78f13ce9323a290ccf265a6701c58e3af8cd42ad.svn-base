package kr.or.ddit.service.impl.goods;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.goods.IGoodsMapper;
import kr.or.ddit.service.goods.IGoodsService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.entertain.ArtistGroupVO;
import kr.or.ddit.vo.goods.GoodsAttachfileVO;
import kr.or.ddit.vo.goods.GoodsCategoryVO;
import kr.or.ddit.vo.goods.GoodsTagVO;
import kr.or.ddit.vo.goods.GoodsVO;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class GoodsServiceImpl implements IGoodsService {
	
	@Inject
	private IGoodsMapper goodsMapper;

	@Override
	public int selectProdListCount(PaginationInfoVO<GoodsVO> pagingVO) {
		return goodsMapper.selectProdListCount(pagingVO);
	}

	@Override
	public List<GoodsVO> selectProdList(PaginationInfoVO<GoodsVO> pagingVO) {
		return goodsMapper.selectProdList(pagingVO);
	}

	@Override
	public List<ArtistGroupVO> selectAritstList() {
		return goodsMapper.selectAritstList();
	}

	@Override
	public List<GoodsCategoryVO> selectCategoryList() {
		return goodsMapper.selectCategoryList();
	}

	@Override
	public ServiceResult insertProd(HttpServletRequest req, GoodsVO goodsVO) {
		ServiceResult result = null;
		 
		String thumnail = null;
		try {
			thumnail = prodThumFileUpload(goodsVO.getGoodsThumb(), goodsVO, req);
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		
		goodsVO.setGoodsThumbnail(thumnail);
		
		int status = goodsMapper.insertProd(goodsVO);
		
		String[] goodsTag = goodsVO.getGoodsTag();
		if (status > 0) {
			
			for (String tag : goodsTag) {
				GoodsTagVO goodsTagVO = new GoodsTagVO(goodsVO.getGoodsNo(), tag);
				goodsMapper.insertGoodsTag(goodsTagVO);
			}
			
			List<GoodsAttachfileVO> prodFileList = goodsVO.getGoodsFileList();
			try {
				prodFileUpload(prodFileList, goodsVO.getGoodsNo(), req);
			} catch (Exception e) {
				e.printStackTrace();
			}
			result = ServiceResult.OK;
		}else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	private String prodThumFileUpload(MultipartFile goodsThumb, GoodsVO goodsVO, HttpServletRequest req) throws Exception {
		String savePath = "resources/upload/";
		
		if (goodsThumb != null) {
			String saveName = UUID.randomUUID().toString();
			saveName += "_" + goodsVO.getGoodsThumb().getOriginalFilename();
//			saveLocate = req.getServletContext().getRealPath(savePath);
			
			savePath += saveName;
			
			log.info("#### saveLocate : " + savePath);
			
			File file = new File(savePath);
			if (!file.exists()) {
				file.mkdirs();
			}
			
			File saveFile = new File(savePath);
			goodsVO.getGoodsThumb().transferTo(saveFile);
			
		}
		return savePath;
		
	}

	private void prodFileUpload(List<GoodsAttachfileVO> prodFileList, int goodsNo, HttpServletRequest req) throws Exception {
		String savePath = "/resource/goods/";
		
		if (prodFileList != null) {
			if (prodFileList.size() > 0) {
				for (GoodsAttachfileVO goodsFileVO : prodFileList) {
					String saveName = UUID.randomUUID().toString();
					saveName += "_" + goodsFileVO.getFileName();
					String saveLocate = req.getServletContext().getRealPath(savePath + goodsNo);
					File file = new File(saveLocate);
 					if (!file.exists()) {
						file.mkdirs();
					}
					
					saveLocate += "/" + saveName;
					
					goodsFileVO.setGoodsNo(goodsNo);
					goodsFileVO.setGaDetailimg(saveLocate);
					
					goodsMapper.insertProdFile(goodsFileVO);
					
					File saveFile = new File(saveLocate);
					goodsFileVO.getItem().transferTo(saveFile);
					
				}
			}
		}
	}

	@Override
	public GoodsVO selectProd(int goodsNo) {
		return goodsMapper.selectProd(goodsNo);
	}

}
