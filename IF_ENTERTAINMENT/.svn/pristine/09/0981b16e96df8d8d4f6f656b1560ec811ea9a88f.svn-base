package kr.or.ddit.controller.goods;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.goods.IGoodsNoticeService;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.goods.GoodsNoticeVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 굿즈샵 공지사항 조회 컨트롤러
 * @author 성이수
 */
@Controller
@Slf4j
@RequestMapping("/goods/notice")
public class GoodsNoticeRetrieveController {
	
	@Inject
	private IGoodsNoticeService goodsNoticeService;

	// 굿즈샵 메인에서는 스와이퍼가 돌아가며 해당 공지 클릭시 공지 디테일로 이동한다.
	
	/**
	 * 관리자 굿즈공지사항 리스트
	 * @param bfNo
	 * @param model
	 * @return
	 */
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/list.do")
	public String goodsNoticeList(
			@RequestParam(name ="page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false) String searchWord,
			Model model) {
		PaginationInfoVO<GoodsNoticeVO> pagingVO = new PaginationInfoVO<GoodsNoticeVO>();
		
		if (!StringUtils.isBlank(searchWord)) {
			pagingVO.setSearchWord(searchWord);
			
			model.addAttribute("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = goodsNoticeService.selectGoodsNoticeListCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<GoodsNoticeVO> goodsNoticeList = goodsNoticeService.selectgoodsNoticeList(pagingVO);
		pagingVO.setDataList(goodsNoticeList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "admin/goods/goodsNoticeList";
	}
	
	/**
	 * 관리자 굿즈공지사항 디테일
	 * @param bfNo
	 * @param model
	 * @return
	 */
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/detail.do", method = RequestMethod.GET)
	public String goodsNoticeDetail(int bfNo, Model model) {
		
		GoodsNoticeVO goodsNoticeVO = goodsNoticeService.selectGoodsNotice(bfNo);
		
		log.info("goodsNoticeVO"+ goodsNoticeVO);
		model.addAttribute("goodsNotice", goodsNoticeVO);
		return "admin/goods/goodsNoticeDetail";
	}
	
	/**
	 * 사용자 굿즈공지사항 리스트
	 * @param bfNo
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/userlist.do")
	public String UserGoodsNoticeList(@RequestParam(name ="page", required = false, defaultValue = "1") int currentPage,
			Model model) {
		
		PaginationInfoVO<GoodsNoticeVO> pagingVO = new PaginationInfoVO<GoodsNoticeVO>();
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = goodsNoticeService.selectGoodsNoticeListCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
		
		List<GoodsNoticeVO> goodsNoticeList = goodsNoticeService.selectgoodsNoticeList(pagingVO);
		pagingVO.setDataList(goodsNoticeList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "goods/goodsNoticeList";
		
	}
	
	/**
	 * 사용자 굿즈공지사항 디테일
	 * @param bfNo
	 * @param model
	 * @return
	 */
	@RequestMapping(value = "/userdetail.do", method = RequestMethod.GET)
	public String UserGoodsNoticeDetail(int bfNo, Model model) {
		
		GoodsNoticeVO goodsNoticeVO = goodsNoticeService.selectGoodsNotice(bfNo);
		
		model.addAttribute("goodsNotice", goodsNoticeVO);
		return "goods/goodsNoticeDetail";
	}
	
}
