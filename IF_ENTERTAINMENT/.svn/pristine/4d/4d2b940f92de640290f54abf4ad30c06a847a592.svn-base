package kr.or.ddit.controller.common;

import java.util.Arrays;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.common.IMailSendService;
import kr.or.ddit.service.common.ISignService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.UserVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 회원가입 컨트롤러
 * @author 임민혁
 */
@Controller
@Slf4j
public class SignUpController {
	
	@Inject
	private ISignService signService;
	@Inject
	private IMailSendService mailService;
	
	@RequestMapping(value="/signup.do",method= RequestMethod.GET)
	public String signup() {
		return "commons/signUpForm";
	}
//	@RequestMapping(value="/signup.do",method= RequestMethod.POST)
//	public String signup1(
//			HttpServletRequest req,
//			RedirectAttributes ra,
//			BindingResult bind,
//			UserVO userVO, Model model) throws Exception {
//		String goPage = "";
//		
//		String[] notiTypeArray = userVO.getNotiType();
//		String[] settingsArray = userVO.getNotiSetting();
//		String notiTypeString = Arrays.toString(notiTypeArray);
//		String notisettingString = Arrays.toString(settingsArray);
//		
//		
//		String memberEmail = userVO.getMemberEmail().replace(",", "");
//		String memberBirth = userVO.getMemberBirth().replace(",", "/");
//		
//		System.out.println("Noti Type: " + notiTypeString);
//		System.out.println("#Notisett##"+notisettingString);
//		
//		userVO.setMemberEmail(memberEmail);
//		userVO.setMemberBirth(memberBirth);
//		userVO.setUserType("2");
//		userVO.setEnabled("1");
//		ServiceResult result = signService.signup(req,userVO);
//		
//		
//		
//		if(result.equals(ServiceResult.OK)) { // 가입하기 성공
//			// 일회성 메세지 처리
//			ra.addFlashAttribute("message","회원가입을 완료하였습니다!");
//			goPage = "redirect:/signinForm";
//		}else { // 가입하기 실패
//			model.addAttribute("bodyText","register-page");
//			model.addAttribute("message", "서버에러, 다시 시도해주세요!");
//			model.addAttribute("user", userVO);
//			goPage = "signUpForm";
//		}
//		return goPage;
//	}
	 @RequestMapping(value="/signup.do", method=RequestMethod.POST)
	    public String signup(
	            HttpServletRequest req,
	            RedirectAttributes ra,
	            @Valid UserVO userVO,
	            BindingResult bind,
	            Model model) throws Exception {
	        
	        String goPage = "";
	        
	        if (bind.hasErrors()) { // 유효성 검사 오류가 있는 경우
	            // 오류 처리 로직을 여기에 작성
	            model.addAttribute("bodyText", "register-page");
	            model.addAttribute("message", "유효성 검사 오류가 발생했습니다. 다시 시도해주세요.");
	            return "signUpForm"; // 오류 페이지로 이동하거나 적절한 처리를 수행
	        } else {
	            // 유효성 검사 통과시 수행할 로직
	            String[] notiTypeArray = userVO.getNotiType();
	            String[] settingsArray = userVO.getNotiSetting();
	            String notiTypeString = Arrays.toString(notiTypeArray);
	            String notisettingString = Arrays.toString(settingsArray);

	            String memberEmail = userVO.getMemberEmail().replace(",", "");
	            String memberBirth = userVO.getMemberBirth().replace(",", "/");
	            
	    		System.out.println("Noti Type: " + notiTypeString);
	    		System.out.println("#Notisett##"+notisettingString);
	            
	            
	            userVO.setMemberEmail(memberEmail);
	            userVO.setMemberBirth(memberBirth);
	            userVO.setUserType("2");
	            userVO.setEnabled("1");

	            ServiceResult result = signService.signup(req, userVO);

	            if (result.equals(ServiceResult.OK)) { // 가입하기 성공
	                // 일회성 메세지 처리
	                ra.addFlashAttribute("message", "회원가입을 완료하였습니다!");
	                goPage = "redirect:/signinForm";
	            } else { // 가입하기 실패
	                model.addAttribute("bodyText", "register-page");
	                model.addAttribute("message", "서버에러, 다시 시도해주세요!");
	                model.addAttribute("user", userVO);
	                goPage = "signUpForm";
	            }
	            return goPage;
	        }
	    }
	
	@ResponseBody
	@RequestMapping(value="/idChk", method = RequestMethod.POST)

	public ResponseEntity<ServiceResult> idCheck(@RequestBody Map<String, String> map) {
		log.info("userId: " + map.get("userId"));
		
		ServiceResult result = signService.idCheck(map.get("userId"));
		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
	}
	
	@ResponseBody
	@RequestMapping(value="/mailCheck", method = RequestMethod.GET)
	public String mailCheck(String email) {
		System.out.println("이메일 인증 요청이 들어옴!");
		System.out.println("이메일 인증 이메일 : " + email);
		return mailService.joinEmail(email);
	}
	
	
	
}
