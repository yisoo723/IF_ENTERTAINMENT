package kr.or.ddit.controller.common;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.common.IStatisticService;
import kr.or.ddit.service.common.IWordAnalysisService;
import kr.or.ddit.vo.statistic.KeywordVO;
import kr.or.ddit.vo.statistic.MemberRateVO;
import kr.or.ddit.vo.statistic.StatisticInfoVO;
import lombok.extern.slf4j.Slf4j;

@Controller
@Slf4j
@RequestMapping("/admin/statistics")
public class StatisticsController {
	
	@Inject
	private IWordAnalysisService wordAnalysisService;
	
	@Inject
	private IStatisticService statisticService;

	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value="/community.do", method = RequestMethod.GET)
	public String community(Model model) {
		
		// 가입자 수 내림차 순으로 그룹아이디 리스트를 조회한다.
		List<String> agIdList = statisticService.selectAgIdList();
		model.addAttribute("agIdList", agIdList);
		
		return "admin/statistic_community";
	}
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value="/communityAjax.do", method = RequestMethod.GET)
	public ResponseEntity<Map<String, Object>> statisticAjax(
			@RequestParam(name ="duration", required = false) String duration,
			@RequestParam(name ="agId", required = false) String agId
			) {
		log.info("넘어온 duration : {} | 넘어온 agId : {}", duration, agId);
		
		ResponseEntity<Map<String, Object>> entity = null;
		
		// 커뮤니티 통계 자료를 담을 맵 선언
		Map<String, Object> commStatMap = new HashMap<String, Object>();
		
		// 통계 기간과 어떤 그룹에 대한 통계를 가져올지 설정할 VO생성
		StatisticInfoVO statisticInfoVO = new StatisticInfoVO();
		
		// agId가 비어있지 않다면 통계설정 VO에 세팅해준다.
		if (StringUtils.isNotBlank(agId)) {
			statisticInfoVO.setAgId(agId);
		} 
		
		// 기간이 비어있지 않다면 통계설정 VO에 세팅해준다.
		if(StringUtils.isNotBlank(duration)) {
			statisticInfoVO.setDuration(duration);
		}
		
		// 기간별 커뮤니티 가입자 수를 성별로 조회한다.
		List<MemberRateVO> mrList = statisticService.selectMemberRateList(statisticInfoVO);
		commStatMap.put("mrList", mrList);
		
		// 기간별, 아티스트별 남성 팬피드 작성 내역을 조회한다.
		List<KeywordVO> maleKeywordList = statisticService.selectMaleKeywordList(statisticInfoVO);
		List<KeywordVO> femaleKeywordList = statisticService.selectFemaleKeywordList(statisticInfoVO);
		
		String maleKeywords = getKeywords(maleKeywordList);
		String femaleKeywords = getKeywords(femaleKeywordList);
		commStatMap.put("maleKeywords", maleKeywords);
		commStatMap.put("femaleKeywords", femaleKeywords);
		
		// 기간별, 아티스트별 가입자 연령 정보를 조회한다
		List<MemberRateVO> maList = statisticService.selectMemberAgeList(statisticInfoVO);
		commStatMap.put("maList", maList);
		
		// 기간별, 아티스트별 가입자 성별 정보를 조회한다.
		List<MemberRateVO> mgList = statisticService.selectMemberGenderList(statisticInfoVO);
		commStatMap.put("mgList", mgList);
		
		entity = new ResponseEntity<Map<String, Object>>(commStatMap, HttpStatus.OK);
		return entity;
	}

	/**
	 * @param 쿼리 결과로 나온 기간별, 아티스트별 피드 작성 내용 
	 * @return 팬이 작성한 피드 내에서 무의미한 데이터는 날리고 명사만 뽑아 하나의 String 문자열로 반환한다.
	 */
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	private String getKeywords(List<KeywordVO> keywordList) {
		
		String normalizedWord = "";
		
		StringBuffer sb = new StringBuffer();
		
		// 쿼리 결과로 나온 리스트들을 반복문을 돌며 sb에 append해준다.
		if(keywordList != null && keywordList.size() > 0) {
			for (KeywordVO keywordVO : keywordList) {
				sb.append(" " + keywordVO.getFeedContent());
			}
			
			List<String> keywords = null;
			
			try {
				// 합쳐진 sb를 명사만 추출하여 리스트에 담는다.
				keywords = wordAnalysisService.doWordNouns(sb.toString());
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			// 리스트 안에 단어를 하나씩 붙여 공백으로 구분된 하나의 문자열을 만든다.
			for (String string : keywords) {
				normalizedWord += " " + string;
			}
			
		}
		return normalizedWord;
	}
	
}
