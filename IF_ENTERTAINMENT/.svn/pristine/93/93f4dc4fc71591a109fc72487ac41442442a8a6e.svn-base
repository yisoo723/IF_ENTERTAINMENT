package kr.or.ddit.controller.entertain;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.service.entertain.IArtistService;
import kr.or.ddit.vo.entertain.ArtistGroupVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 아티스트 프로필 등록 컨트롤러 
 * @author 조재훈
 */
@Controller
@Slf4j
@RequestMapping("/entertain/artist/profile")
public class ArtistProfileInsertController {
	// 그룹 등록하면서 속한 멤버까지 함께 등록될 수 있도록(트랜잭션)
	
	@Inject
	private IArtistService artistService;
	
	
	@RequestMapping(value = "/form.do", method = RequestMethod.GET)
	public String goodsinsertform(Model model) {
		
//		 List<ArtistGroupVO> artistgroupVO = artistService.selectAritstList();
//		 List<GoodsCategoryVO>categoryVO = artistService.selectCategoryList();
//		 
//		 model.addAttribute("artistgroup", artistgroupVO);
//		 model.addAttribute("category", categoryVO);
		
		return "admin/entertain/artistInsertForm";
	}
	
	
	@PostMapping("/insert.do")
	public String addMembers(
	        @RequestParam("artistFakename[]") List<String> artistFakenames,
	        @RequestParam("artistBirth[]") List<String> artistBirths,
	        @RequestParam("artistIntro[]") List<String> artistIntros,
	        @RequestPart(value = "userProfile[]", required = false) List<MultipartFile> userProfiles) {

	    List<ArtistGroupVO> artistList = new ArrayList<>();

	    for (int i = 0; i < artistFakenames.size(); i++) {
	    	ArtistGroupVO artistGroupVO = new ArtistGroupVO();
	    	artistGroupVO.setArtistFakename(artistFakenames.get(i));
	    	artistGroupVO.setArtistBirth(artistBirths.get(i));
	    	artistGroupVO.setArtistIntro(artistIntros.get(i));

	        if (userProfiles != null && i < userProfiles.size() && !userProfiles.get(i).isEmpty()) {
	            MultipartFile userProfile = userProfiles.get(i);
	            try {
	                byte[] bytes = userProfile.getBytes();
	                artistGroupVO.setUserProfileBytes(bytes);
	            } catch (IOException e) {
	                e.printStackTrace();
	                // 오류 처리
	            }
	        }

	        artistList.add(artistGroupVO);
	    }

	    artistService.insert(artistList);

	    return "admin/entertain/artistInsertForm";
	}
}
