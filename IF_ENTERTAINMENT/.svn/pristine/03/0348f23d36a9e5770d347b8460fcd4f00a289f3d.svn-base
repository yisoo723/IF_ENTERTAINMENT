package kr.or.ddit.socket;

import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.inject.Inject;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.PathVariable;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import kr.or.ddit.mapper.common.IWebSocketMapper;
import kr.or.ddit.service.common.IWebSocketSevice;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.NotificationVO;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

/**
 * 웹소켓 알림 관련 핸들러
 * 
 * @author 성이수
 */
@Slf4j
@Component
@RequiredArgsConstructor
@ServerEndpoint(value = "/notiserver/{id}")
public class WebSocketNotificationHandler {
	// 웹 실시간 알림을 처리하기 위한 핸들러
	// 실시간 알림이 필요한 각 분야에서 해당 핸들러 호출하여 실시간 알림 보낼 수 있도록
	// 클라이언트가 서버에 연결할때 호출되는 메서드

	@Inject
	private IWebSocketMapper websocketMapper;
	
//	private static List<Map<Session, String>> sessionMapList = new ArrayList<Map<Session, String>>();
//	private static Set<Session> sessionMapList = Collections.synchronizedSet(new HashSet<Session>());
	private static Map<String, Session> sessionList = new HashMap<String, Session>();

	//로그인시 들어온 세션을 map으로 관리
	@OnOpen
	public void handleOpen(Session session, @PathParam("id") String id) {
		log.info("세션 들어간다!@!@!@!@!@!@!@ : {}" , session);
		// 로그인한 사용자의 아이디를 통해 Connect된 소켓정보를 Map으로 관리
		sessionList.put(id, session);
		
//		Set<String> keySetList = sessionList.keySet();
//		Iterator<String> ite = keySetList.iterator();
//		while(ite.hasNext()) {
//			String key = ite.next();
//			log.info("핸들러에서 뽑은 key들 : " + key);
//			Session sess = sessionList.get(key);
//			log.info("세션정보 : " + sess.getId());
//		}
	}

	//이벤트가 발생했을때 넘어옴(클라이언트에서 send)
	@OnMessage
	public void handleMessage(String msg, Session session) throws IOException {
		
		log.info("소켓 들어옴!!!!!!! {}", msg);
		
		JsonParser jp = new JsonParser();
		JsonObject eleObj = jp.parse(msg).getAsJsonObject(); // 전체 json 데이터
		
		String type = eleObj.get("type").getAsString(); // 기준이 되는 타입을 꺼냄
		
		if (type.equals("goodsInquiry")) {
			try {
				inquiry(eleObj);
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 1:1문의 답변에 대한 알림
	 * @param eleObj
	 * @param session
	 */
	private void inquiry(JsonObject eleObj) {
		
		log.info("### eleObj : {}", eleObj);
		
		String type = eleObj.get("type").getAsString();
		String userId = eleObj.get("userId").getAsString();
		String status = eleObj.get("status").getAsString();
		String giNo = eleObj.get("giNo").getAsString();
		String admin = "admin001";

		NotificationVO notificationVO = new NotificationVO();
		notificationVO.setNotiSender(admin);
		notificationVO.setNotiReciever(userId);
		notificationVO.setNotiType(type);
		notificationVO.setNotiUrl("/goods/inquiry/detail.do?giNo=" + giNo);
		if (status.equals("등록")) {
			notificationVO.setNotiContent("1:1문의 답변이 등록되었습니다.");
		} else {
			notificationVO.setNotiContent("1:1문의 답변이 수정되었습니다.");
		}
		notificationVO.setNotiType(type);

		ServiceResult result = null;
		try {
			int status1 = websocketMapper.insertInquiry(notificationVO);
			
			if (status1 > 0) {
				result = ServiceResult.OK;
			}else {
				result = ServiceResult.FAILED;
			}

			Set<String> keySetList = sessionList.keySet();
			Iterator<String> ite = keySetList.iterator();
			if (result.equals(ServiceResult.OK)) {
				while(ite.hasNext()) {
					String key = ite.next();
					log.info("핸들러에서 뽑은 key들 : " + key);
					Session sess = sessionList.get(key);
					log.info("세션정보 : " + sess.getId());
					if (key.equals(userId)) {
						try {
							sess.getBasicRemote().sendText("알림");
							 break;
						} catch (Exception e) {
							 e.printStackTrace();
						}
					}
				}
			} else {
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@OnClose
	public void handleClose(Session session) {
		sessionList.remove(session);
	}

	@OnError
	public void handleError(Throwable t) {

	}

}
