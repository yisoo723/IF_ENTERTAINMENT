package kr.or.ddit.controller.community;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.common.IMypageService;
import kr.or.ddit.util.MediaUtils;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.util.UploadFileUtils;
import kr.or.ddit.vo.common.CustomUser;
import kr.or.ddit.vo.common.UserVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 마이페이지 컨트롤러
 * 
 * @author 서어진
 *
 */
@Controller
@Slf4j
@RequestMapping("/community/mypage")
public class MypageController {

	@Inject
	private IMypageService mypageService;

	@Inject
	private PasswordEncoder pe;

	// 1. 마이페이지 조회
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER', 'ROLE_ARTIST')")
	@RequestMapping(value = "/list.do", method = RequestMethod.GET)
	public String myPageForm(Model model) {

		CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); // 로그인
		UserVO userVO = user.getUser();

		UserVO myUserVO = mypageService.selectUserMypage(userVO.getUserNo());

//		log.info("### userVO : {}", userVO);
		model.addAttribute("userVO", myUserVO);
		return "commons/myPageForm";
	}

	/**
	 * jsp에서 썸네일을 업로드하면 해당파일을 저장한다.
	 * 
	 * @param file - 업로드한 파일
	 * @param req  - 서버 경로를 가져오기 위함
	 * @return 썸네일 미리보여주기를 위해 저장된 파일의 이름을 리턴
	 * @throws Exception
	 */
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER', 'ROLE_ARTIST')")
	@RequestMapping(value = "/uploadAjax", method = RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> uploadAjax(MultipartFile file, int userNo, HttpServletRequest req) throws Exception {
		log.info("originalFileName : " + file.getOriginalFilename());

		// savedName은 /2024/03/06/UUID_원본파일명을 리턴한다
		String savedName = UploadFileUtils.uploadFile(req.getServletContext().getRealPath("/resources/profile/"),
				file.getOriginalFilename(), file.getBytes());

		Map<String, Object> map = new HashMap<String, Object>();

		String dbName = "/resources/profile" + savedName;

		map.put("savedName", dbName);
		map.put("userNo", userNo);

		mypageService.updateProfile(map);

		return new ResponseEntity<String>(savedName, HttpStatus.OK);
	}

	/**
	 * 이미지를 클릭시 미리보기를 띄워주는 메서드
	 * 
	 * @param fileName - 저장될 파일 이름
	 * @param req      - 이미지 경로를 저장하기 위함
	 * @return 성공시 미리볼 수 있는 이미지 데이터를 리턴한다.
	 */
	@ResponseBody
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER', 'ROLE_ARTIST')")
	@RequestMapping(value = "/displayFile", method = RequestMethod.GET)
	public ResponseEntity<byte[]> displayFile(String fileName, HttpServletRequest req) {
		InputStream in = null;
		ResponseEntity<byte[]> entity = null;

		log.info("fileName(displayFile) : " + fileName);

		String formatName = fileName.substring(fileName.lastIndexOf(".") + 1);
		MediaType mType = MediaUtils.getMediaType(formatName);
		HttpHeaders headers = new HttpHeaders();

		try {
			in = new FileInputStream(req.getServletContext().getRealPath("/resources/profile/") + fileName);
			if (mType != null) {
				headers.setContentType(mType);
			} else {
				fileName = fileName.substring(fileName.indexOf("_") + 1);
				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
				headers.add("Content-Disposition",
						"attachment; filename=\"" + new String(fileName.getBytes("UTF-8"), "ISO-8859-1") + "\"");
			}
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), headers, HttpStatus.CREATED);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
		} finally {
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return entity;
	}

	// 2. 마이페이지 수정
	// 비밀번호 수정 시 passwordEncoder 방식으로 암호화하여 업데이트
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER', 'ROLE_ARTIST')")
	@RequestMapping(value = "/update.do", method = RequestMethod.POST)
	public String myPageUpdate(UserVO myUserVO, HttpServletRequest req, Model model) {
		String goPage = "";
		
		log.info("@@@@ myUserVO : {}", myUserVO);

		// 알림수신 여부가 체크되어있다면 해당 값을 Y로 세팅, 반대면 N을 세팅해준다.
		if(myUserVO.getNsArtist() != null && myUserVO.getNsArtist().equals("on")) { // 널 
			myUserVO.setNsArtist("Y");
		} else {
			myUserVO.setNsArtist("N");
		}
		
		if(myUserVO.getNsGoods() != null && myUserVO.getNsGoods().equals("on")) {
			myUserVO.setNsGoods("Y");
		} else {
			myUserVO.setNsGoods("N");
		}
		
		if(myUserVO.getNsCompany() != null && myUserVO.getNsCompany().equals("on")) {
			myUserVO.setNsCompany("Y");
		} else {
			myUserVO.setNsCompany("N");
		}

		CustomUser user = (CustomUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal(); // 로그인
		UserVO userVO = user.getUser();

		myUserVO.setUserPw(pe.encode(myUserVO.getUserPw()));
		ServiceResult resultPw = mypageService.myPagePasswordUpdate(req, myUserVO);
		
		model.addAttribute("userVO", userVO);
		
		if (resultPw.equals(ServiceResult.OK)) {
			/* SecurityContextHolder.clearContext(); */
			goPage = "redirect:/community/mypage/list.do";
		} else {
			model.addAttribute("member", userVO);
			model.addAttribute("message", "서버에러, 다시 시도해주세요!");
			goPage = "community/mypage/list.do";
		}
		return goPage;
	}
	
	// 마이페이지 회원 탈퇴
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_MEMBER', 'ROLE_ARTIST')")
	@RequestMapping(value="/delete.do", method = RequestMethod.POST)
	public ResponseEntity<String> myPageDelete(Model model, int userNo
			) {
		ResponseEntity<String> entity = null;
		ServiceResult result = mypageService.deleteMyForm(userNo);
		if(result.equals(ServiceResult.OK)) { 
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
		} else { 
			entity = new ResponseEntity<String>("FAILED", HttpStatus.BAD_REQUEST);
		}
		return entity;
	}

}
