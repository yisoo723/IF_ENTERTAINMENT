package kr.or.ddit.controller.community;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.IOUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.service.community.ISurveyService;
import kr.or.ddit.util.MediaUtils;
import kr.or.ddit.util.UploadFileUtils;
import kr.or.ddit.vo.community.SurveyFormVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 설문조사 등록 컨트롤러(관리자)
 * 설문조사 실시 컨트롤러(사용자)
 * @author 홍진영
 */
@Controller
@Slf4j
@RequestMapping("/community/survey")
public class SurveyInsertController {

	@Inject
	private ISurveyService surveyService;
	
	/**
	 * @author 홍진영
	 * @return 설문지 등록 폼 jsp경로 리턴
	 */
	@RequestMapping(value="/register.do", method = RequestMethod.GET)
	public String registerSurveyForm() {
		return "admin/community/surveyRegisterForm";
	}
	
	/**
	 * @author 홍진영
	 * @return 설문지 목록 jsp경로 리턴
	 */
	@RequestMapping(value="/register.do", method = RequestMethod.POST)
	public String registerSurvey(SurveyFormVO surveyFormVO, Model model) {
		
		log.info("surveyFormVO : {}", surveyFormVO);
		
		return "admin/community/surveyRegisterForm";
	}
	
	/**
	 * jsp에서 썸네일을 업로드하면 해당파일을 저장한다.
	 * @param file - 업로드한 파일
	 * @param req - 서버 경로를 가져오기 위함
	 * @return 썸네일 미리보여주기를 위해 저장된 파일의 이름을 리턴 
	 * @throws Exception
	 */
	@RequestMapping(value="/uploadAjax", method = RequestMethod.POST, 
			produces = "text/plain;charset=utf-8")
	public ResponseEntity<String> uploadAjax(MultipartFile file,
			HttpServletRequest req) throws Exception{
		log.info("originalFileName : " + file.getOriginalFilename());
		
		// savedName은 /2024/03/06/UUID_원본파일명을 리턴한다
		String savedName = UploadFileUtils.uploadFile(req.getServletContext().getRealPath("/resources/survey/"), 
				file.getOriginalFilename(), file.getBytes());
		return new ResponseEntity<String>(savedName, HttpStatus.OK);
	}
	
	@ResponseBody
	@RequestMapping(value="/displayFile", method = RequestMethod.GET)
	public ResponseEntity<byte[]> displayFile(String fileName, HttpServletRequest req){
		InputStream in = null;
		ResponseEntity<byte[]> entity = null;
		
		log.info("fileName(displayFile) : " + fileName);
		
		String formatName = fileName.substring(fileName.lastIndexOf(".") + 1);
		MediaType mType = MediaUtils.getMediaType(formatName);
		HttpHeaders headers = new HttpHeaders();
		
		try {
			in = new FileInputStream(req.getServletContext().getRealPath("/resources/survey/") + fileName);
			if(mType != null) {
				headers.setContentType(mType);
			} else {
				fileName = fileName.substring(fileName.indexOf("_") + 1);
				headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
				headers.add("Content-Disposition", "attachment; filename=\"" +
						new String(fileName.getBytes("UTF-8"), "ISO-8859-1") + "\"");
			}
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in),
					headers, HttpStatus.CREATED);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
		} finally {
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return entity;
	} 
	
}
