package kr.or.ddit.controller.entertain;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.entertain.IArtistService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.entertain.ArtistGroupVO;
import kr.or.ddit.vo.entertain.ArtistVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 아티스트 프로필 수정 및 삭제 컨트롤러
 * @author 조재훈
 */
@Controller
@Slf4j
@RequestMapping("/entertain/artist/profile")
public class ArtistProfileModifyController {

	// 완전한 삭제가 아닌 삭제 여부를 N -> Y로 업데이트
	
	@Inject
	private IArtistService artistService;
	
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/delete.do", method = RequestMethod.POST)
	public String deleteArtist(
			HttpServletRequest req,
			RedirectAttributes ra,
			String agId) {
		String goPage = "";
		
		ServiceResult result = artistService.deleteArtist(req, agId);
		if (result.equals(ServiceResult.OK)) {
			ra.addFlashAttribute("message", "아티스트 삭제가 완료되었습니다.");
			goPage = "redirect:/entertain/artist/album/adminList.do";
		}else {
			ra.addFlashAttribute("message1", "서버오류, 다시시도해주세요.");
			goPage = "redirect:/entertain/artist/album/adminList.do";
		}
		return goPage;
		
	}
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@RequestMapping(value = "/updateForm.do", method = RequestMethod.GET)
	public String artistUpdate(String agId, Model model) {
		ArtistGroupVO artistGroupVO = artistService.artistGroupSelect(agId);
		List<ArtistVO> list = artistService.artistMemberSelect(agId);
		model.addAttribute("artist",artistGroupVO);
		model.addAttribute("list",list);
		return "admin/entertain/artistUpdateForm";
	}
	
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping("/update.do")
	public String addMembers(
				@RequestParam("artistFakename[]") List<String> artistFakenames,
	            @RequestParam("artistBirth[]") List<String> artistBirths,
	            @RequestParam("artistIntro[]") List<String> artistIntros,
	            @RequestParam(value = "userPhoto[]" , required = false) List<MultipartFile> userPhotos,
	            @RequestParam("userNo[]") List<String> userNos,
	            @RequestParam("agId") String agId,
	            @RequestParam("agName") String agName,
	            @RequestParam("agDate") String agDate,
	            @RequestParam("agIntro") String agIntro,
	            @RequestParam("userPhotoExists[]") List<Boolean> userPhotoExists ,
	            @RequestParam(value = "agPhoto", required = false) MultipartFile agPhoto,
	            HttpServletRequest req
) {
	        
		
		  for (String name : artistFakenames) {
	            System.out.println("Artist Fakename: " + name);
	        }
	        // 아티스트 생년월일 출력
	        for (String birth : artistBirths) {
	            System.out.println("Artist Birth: " + birth);
	        }
	        // 아티스트 소개 출력
	        for (String intro : artistIntros) {
	        	System.out.println("Artist Intro: " + intro);
	        }
	        for (String no : userNos) {
	        	System.out.println("User No: " + no);
	        }

	        // 사용자 프로필 이미지 파일 이름 출력
	        if (userPhotos != null && !userPhotos.isEmpty()) {
	            for (MultipartFile file : userPhotos) {
	                if (!file.isEmpty()) {
	                    System.out.println("User Profile: " + file.getOriginalFilename());
	                }
	            }
	        }


	        // ag 관련 정보 출력
	        System.out.println("AG ID: " + agId);
	        System.out.println("AG Date: " + agDate);
	        System.out.println("AG Intro: " + agIntro);
//	        System.out.println("AG Profile: " + agProfile);
	        
	        
	        ArtistGroupVO artistGroupVO1 = new ArtistGroupVO(agPhoto);
	        
	         //파라미터 값을 ArtistGroupVO 객체에 설정
	        artistGroupVO1.setAgId(agId);
	        artistGroupVO1.setAgName(agName);
	        artistGroupVO1.setAgDate(agDate);
	        artistGroupVO1.setAgIntro(agIntro);
	        if (agPhoto != null && !agPhoto.isEmpty()) {
	            artistGroupVO1.setAgPhoto(agPhoto);
	        }
	        log.info("artistGroupVO1 == " + artistGroupVO1);
	        artistService.groupUpdate(artistGroupVO1,req);
	        
	        List<ArtistVO> artistList = new ArrayList<>();
	        log.info("userPhotosuserPhotosuserPhotos"+userPhotos);
	        for (int i = 0; i < artistFakenames.size(); i++) {
	            ArtistVO artistVO = new ArtistVO();
	            
	            artistVO.setArtistFakename(artistFakenames.get(i));
	            artistVO.setArtistBirth(artistBirths.get(i));
	            artistVO.setArtistIntro(artistIntros.get(i));
	            artistVO.setUserNo(Integer.parseInt(userNos.get(i)));
	            artistVO.setAgId(agId);
	            
	            log.info("artistVOartistVOartistVO" + artistVO);
	            
	            if (i < userPhotoExists.size() && userPhotoExists.get(i)) {
	                if (i < userPhotos.size()) {
	                    MultipartFile file = userPhotos.get(i);
	                    if (!file.isEmpty()) {
	                        artistVO.setUserPhoto(file);
	                    }
	          

	        }

	
}
		         
		    artistList.add(artistVO);
	        }
	        log.info("@@@@@@@@" + artistList);
	      artistService.memberUpdate(artistList,req);  
	      
	    return "redirect:/entertain/artist/album/adminList.do";
	}
	
	@RequestMapping(value ="/memberInsert.do", method = RequestMethod.POST)
	public String memberInsert(ArtistVO artistVO) {
		
		log.info("artistVO 값 : " + artistVO);
		artistService.memberInsert(artistVO);
		return "admin/entertain/artistUpdateForm";
	}
	
	@RequestMapping(value ="/memberDelete.do", method = RequestMethod.POST)
	public String memberDelete(ArtistVO artistVO, int userNo) {
		log.info("artistVO 값 : " + artistVO);
		log.info("userNo 값 : " + userNo);
				artistService.memberDelete(artistVO);
		return "admin/entertain/artistUpdateForm";
	}
}
