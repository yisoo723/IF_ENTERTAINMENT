package kr.or.ddit.controller.common;

import java.util.Arrays;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.service.common.IMailSendService;
import kr.or.ddit.service.common.ISignService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.UserVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 회원가입 컨트롤러
 * @author 임민혁
 */
@Controller
@Slf4j
public class SignUpController {
	
	@Inject
	private ISignService signService;
	@Inject
	private IMailSendService mailService;
	
	@RequestMapping(value="/signup.do",method= RequestMethod.GET)
	public String signup() {
		return "commons/signUpForm";
	}
	@RequestMapping(value="/signup.do",method= RequestMethod.POST)
	public String signup1(
			HttpServletRequest req,
			RedirectAttributes ra,
			UserVO userVO, Model model) throws Exception {
		String goPage = "";
		System.out.println("####"+userVO.getUserId());
		System.out.println("####"+userVO.getUserName());
		System.out.println("####"+userVO.getUserPw());
		System.out.println("####이건 하드코딩"+userVO.getUserType());
		System.out.println("####"+userVO.getMemberPostcode());
		System.out.println("####"+userVO.getMemberAddress1());
		System.out.println("####"+userVO.getMemberAddress2());
		System.out.println("####"+userVO.getMemberBirth());
		System.out.println("####"+userVO.getMemberEmail());
		System.out.println("####"+userVO.getMemberGender());
		System.out.println("####"+userVO.getMemberTelno());
		System.out.println("####"+userVO.getMemberNotification());
		
		String[] notiTypeArray = userVO.getNotiType();
		String[] settingsArray = userVO.getNotiSetting();
		String notiTypeString = Arrays.toString(notiTypeArray);
		String notisettingString = Arrays.toString(settingsArray);
		
		
		
		
		System.out.println("Noti Type: " + notiTypeString);
		System.out.println("#Notisett##"+notisettingString);
		
		userVO.setUserType("2");
		ServiceResult result = signService.signup(req,userVO);
		
		
		
		if(result.equals(ServiceResult.OK)) { // 가입하기 성공
			// 일회성 메세지 처리
			ra.addFlashAttribute("message","회원가입을 완료하였습니다!");
			goPage = "redirect:/signinForm";
		}else { // 가입하기 실패
			model.addAttribute("bodyText","register-page");
			model.addAttribute("message", "서버에러, 다시 시도해주세요!");
			model.addAttribute("user", userVO);
			goPage = "signUpForm";
		}
		return goPage;
	}
	
	
	@ResponseBody
	@RequestMapping(value="/idChk", method = RequestMethod.POST)
	public ResponseEntity<ServiceResult> idCheck(@RequestBody Map<String, String> map) {
		log.info("userId: " + map.get("userId"));
		
		ServiceResult result = signService.idCheck(map.get("userId"));
		return new ResponseEntity<ServiceResult>(result, HttpStatus.OK);
	}
	@GetMapping("/mailCheck")
	@ResponseBody
	public String mailCheck(String email) {
		System.out.println("이메일 인증 요청이 들어옴!");
		System.out.println("이메일 인증 이메일 : " + email);
		return mailService.joinEmail(email);
	}
	
	
	
}
