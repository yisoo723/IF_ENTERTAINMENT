package kr.or.ddit.controller.community;

import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.community.IMemberManageService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.common.UserVO;
import kr.or.ddit.vo.community.FeedReportVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 회원 정보, 연예인 등록, 신고된 게시글 및 유저, 블랙리스트를 관리 할 수 있는 회원관리 컨트롤러
 * @author 이수진
 */
@Controller
@Slf4j
@RequestMapping("/community/memManage")
public class MemberManageController {
	
	@Inject
	private IMemberManageService memberManageService;
	
	@RequestMapping(value = "/admin/memberList.do")
	public String memberList(
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord,
			Model model
			) {
		
		PaginationInfoVO<UserVO> pagingVO = new PaginationInfoVO<UserVO>();
		
		if(StringUtils.isBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}
		
		pagingVO.setCurrentPage(currentPage);
		int totalRecord = memberManageService.selectMemberCount(pagingVO);
		
		pagingVO.setTotalRecord(totalRecord);
		log.info("###########currentPage {}", currentPage);
		log.info("###########totalRecord {}", totalRecord);
		
		List<UserVO> dataList = memberManageService.memberList(pagingVO);
		pagingVO.setDataList(dataList);
		
		model.addAttribute("pagingVO", pagingVO);
		
		return "admin/community/memberList";
	}
	
	@RequestMapping(value = "/admin/feedReportList.do",method = RequestMethod.GET)
	public String reportBoardList(
			@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "title") String searchType,
			@RequestParam(required = false) String searchWord,
			Model model
			) {
		PaginationInfoVO<FeedReportVO>  pagingVO = new PaginationInfoVO<FeedReportVO>();
		
		if(StringUtils.isBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}
		log.info("searchType {}", searchType);
		log.info("searchWord {}", searchWord);
		
		pagingVO.setCurrentPage(currentPage);
		
		int totalRecord = memberManageService.selectFeedReportCount(pagingVO);
		pagingVO.setTotalRecord(totalRecord);
//		log.info("feedReportCurentPage {}", currentPage);
//		log.info("feedReportTotalRecord {}", totalRecord);
		
		List<FeedReportVO> dataList = memberManageService.feedReportList(pagingVO);
		pagingVO.setDataList(dataList);
		log.info("dataList {}", dataList);
		model.addAttribute("pagingVO", pagingVO);
		
		
		return "admin/community/feedReportList";
	}
	
	@RequestMapping(value = "/admin/feedReportList.do", method = RequestMethod.POST)
	public ResponseEntity<ServiceResult> reportState(@RequestBody FeedReportVO feedReportVO, Model model) {
//		log.info("feedDelyn {}", feedReportVO.getFeedNo());
//		feedReportVO.setFeedDelyn("N");
		
		FeedReportVO reportUser = memberManageService.reportUpdate(feedReportVO);
		log.info("reportUserreportUser {}", reportUser);
		
		if(feedReportVO.getReportChecked() == "1") {
			memberManageService.reportUserStop(reportUser);
			
		}else {
			memberManageService.reportState(feedReportVO);
		}
		
		return new ResponseEntity<ServiceResult>(HttpStatus.OK);
	}

}
