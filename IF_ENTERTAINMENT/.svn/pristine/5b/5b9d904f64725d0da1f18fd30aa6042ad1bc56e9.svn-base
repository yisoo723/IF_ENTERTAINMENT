package kr.or.ddit.controller.community;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import kr.or.ddit.service.community.IFeedService;
import kr.or.ddit.service.community.IJoinService;
import kr.or.ddit.service.community.ISurveyService;
import kr.or.ddit.vo.common.UserVO;
import kr.or.ddit.vo.community.CommunityVO;
import kr.or.ddit.vo.community.FeedCommentVO;
import kr.or.ddit.vo.community.FeedVO;
import kr.or.ddit.vo.community.MainArtistGroupVO;
import kr.or.ddit.vo.community.MemberNickNameVO;
import kr.or.ddit.vo.community.SurveyFormVO;
import kr.or.ddit.vo.entertain.ArtistGroupVO;
import lombok.extern.slf4j.Slf4j;

/**
 * 커뮤니티 메인페이지
 * 
 * @author 임민혁
 */
@Controller
@Slf4j
@RequestMapping("/community")
/*
 * 메인화면 커뮤니티 메인페이지는 로그인을 하지 않아도 조회는 가능함 아티스트를 선택했을 때 로그인을 강제함
 */

/*
 * 커뮤니티 가입하는 메소드 닉네임 중복값 검사(커뮤니티마다 각각 다른 닉네임 사용가능, 회원닉네임 테이블에 Insert) 커뮤니티가입
 * 테이블에 Insert
 */
public class CommunityMainController {
//
//	@RequestMapping(value = "/artist", method = RequestMethod.GET)
//	public String communitySignUp(@RequestParam("agId") String agId, Model model
////			Principal principal
////			시큐리티
//			) {
//	    log.info("agId: " + agId);
//	    List<MainArtistGroupVO> artist = feedService.getArtistById(agId);
//	    log.info("artist123: " + artist);
//	    model.addAttribute("artistGroup", artist);
//	    
//	        log.info("agId111: " + agId);
//	        
//	        //하드코딩
//	       
//	        //아티스트 그룹아이디가 넘어가니까 그 아티스트 그룹아이디랑 userNo를 넘겨야해
//	        CommunityVO communityVO = new CommunityVO();
//	        communityVO.setUserNo(30);
//	        communityVO.setAgId(agId);
//	        
//	        CommunityVO comId = feedService.selectUser(communityVO);
//	        model.addAttribute("UserInfo",comId);
//	        if(comId !=null) {
//	        	//여기에 comId 이거값이없으면 바로 @RequestParam("agId") 
//	        	model.addAttribute("artistGroup", artist);
//	        	model.addAttribute("userInfo",communityVO);
//	        	return "community/artistFeed";
//	        }else {
//	        	model.addAttribute("artistGroup", artist);
//	        	model.addAttribute("userInfo",communityVO);
//	        	return "commons/communitySignUp"; 
//	        }
//	    
////	    comId.setUserNo(30);
	    

//	}
//	

	@Inject
	private ISurveyService surveyService;
	
    @Inject
    private IFeedService feedService;
    
	@Inject
	private IJoinService joinService;


    @RequestMapping(value = "/main.do", method = RequestMethod.GET)
    public String artistList(Model model) {
        List<MainArtistGroupVO> artistList = feedService.selectArtist();
        //하드코딩
        int userNo = 30;
        
//        UserVO user= feedService.userTypeSelect(userNo);
        
        // 팝업에 띄울 하나의 설문지 객체를 가져온다.
        SurveyFormVO surveyPopupForm = surveyService.selectSurveyPopup();
        
        List<ArtistGroupVO> mycommunityList = joinService.selectmycommunityList(userNo);
        
        model.addAttribute("mycommunityList", mycommunityList);
       
        model.addAttribute("surveyPopupForm", surveyPopupForm);
        
        model.addAttribute("artistList", artistList);
       
        return "community/feedMain";
    }

    
    
    
    @RequestMapping(value = "/artist", method = RequestMethod.GET)
    public String communitySignUp(@RequestParam("agId") String agId, HttpServletRequest req, Model model,
    		@RequestParam(name ="userType", required = false, defaultValue = "2") String userType
    		) {
        log.info("agId: " + agId);
        log.info("userType: " + userType);
       

        
        List<MainArtistGroupVO> artist = feedService.getArtistById(agId);

        List<FeedVO> feedList = feedService.mainFeedList(agId,userType);
        
        
        model.addAttribute("feedList", feedList);
      

        log.info("feedListfeedList: " + feedList);

        Map<Integer, List<FeedCommentVO>> commentMap = new HashMap<>();

        for (FeedVO feed : feedList) {
            int feedNo = feed.getFeedNo();
            log.info("feedNofeedNo: " + feedNo);
            List<FeedCommentVO> commentList = feedService.mainCommentList(feedNo);
            log.info("commentListcommentListcommentList: " + commentList);
            model.addAttribute("commentList", commentList);
            commentMap.put(feedNo, commentList);
        }
        
        
        model.addAttribute("commentMap", commentMap);
        
        log.info("artist123: " + artist);
       
        model.addAttribute("artistGroup", artist);
       
        log.info("agId111: " + agId);
        
        List<FeedVO> artistComment = feedService.artistCommentList(agId);
        model.addAttribute("artistCommentList",artistComment);
        
        CommunityVO communityVO = new CommunityVO();
        
        //로그인 하드코딩
        communityVO.setUserNo(1008);
        communityVO.setAgId(agId);
        
        CommunityVO comId = feedService.selectUser(communityVO);
        
        
        model.addAttribute("UserInfo", comId);
        log.info("comId: " + comId);
       
        if (comId != null) {
            //하드코딩
            FeedVO feedVO = new FeedVO();
            feedVO.setMnNickName(comId.getMnNickName());
            String membership  = feedService.checkMembership(feedVO);
            boolean member = (membership !=null);
            // 멤버십 여부 확인
            // 모델에 멤버십 여부 추가
            System.out.println("membershipmembership"+member);
            model.addAttribute("member", member);
        	
        	model.addAttribute("artistGroup", artist);
            model.addAttribute("userInfo", communityVO);
            return "community/artistFeed";
        } else {
//            model.addAttribute("artistGroup", artist);
//            model.addAttribute("userInfo", communityVO);
            
            HttpSession session = req.getSession();
            //세션에 담아서 전달	
            session.setAttribute("artistGroup", artist);
            session.setAttribute("userInfo", communityVO);
//    	    if (principal != null) {
//	        // 로그인 상태일 때 처리할 내용
//	    } else {
//	        // 비로그인 상태일 때 처리할 내용
//	        return "community/artistFeed";
//	    }
            return "commons/communitySignUp";
        }
    }

    @RequestMapping(value = "/communitySignUp", method = RequestMethod.POST)
    public String communitySignUp(Model model, MemberNickNameVO nickVO, HttpServletRequest request) {
    	
    	HttpSession session = request.getSession();
    	
        ArrayList<MainArtistGroupVO> artistGroupList = (ArrayList<MainArtistGroupVO>) session.getAttribute("artistGroup");
    	
        MainArtistGroupVO artistGroup = artistGroupList.get(0);
       
        CommunityVO userInfo = (CommunityVO) session.getAttribute("userInfo");
        //일단 커뮤니티 가입시킨후 멤버닉네임 추가
        
        CommunityVO comSignUp=new CommunityVO();
        comSignUp.setAgId(artistGroup.getAgId());
        comSignUp.setUserNo(userInfo.getUserNo());
        
        //가입진행
       
        int suc =feedService.comSignUp(comSignUp);
        if(suc >0) {
        	
        //이건 멤버쉽 가입용 임시로 넣어서 확인 처음 가입에는 없어야해
       
        nickVO.setCjNo(comSignUp.getCjNo());
        nickVO.setUserNo(userInfo.getUserNo());
        
        log.info("nickVOnickVO", nickVO.getMnNickname());
        log.info("nickVOnickVO", nickVO.getCjNo());
        log.info("nickVOnickVO", nickVO.getUserNo());
        feedService.nicSignUp(nickVO);
        }
//        MemberNickNameVO memberNickName=feedService.comSignUp();
//        log.info("comcom", communityVO);
        return "redirect:/community/artist?agId=" + userInfo.getAgId();
    }
}
