package kr.or.ddit.controller.entertain;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.service.entertain.IArtistService;
import kr.or.ddit.vo.common.UserVO;
import kr.or.ddit.vo.entertain.ArtistGroupVO;
import kr.or.ddit.vo.entertain.ArtistVO;
import lombok.extern.slf4j.Slf4j;	

/**
 * 아티스트 프로필 등록 컨트롤러 
 * @author 조재훈
 */

@Controller
@Slf4j
@RequestMapping("/entertain/artist/profile")
public class ArtistProfileInsertController {
	// 그룹 등록하면서 속한 멤버까지 함께 등록될 수 있도록(트랜잭션)
	
	@Inject
	private IArtistService artistService;
	
	
	
	
	@RequestMapping(value = "/form.do")
	public String goodsinsertform(Model model) {
		
		 List<UserVO> userList = artistService.aritstListForm();
//		 log.info("userasd+ " + userList);
		 model.addAttribute("userList", userList);
		 
		
		return "admin/entertain/artistInsertForm";
	}
	
	@RequestMapping(value = "/getArtistList.do", method = RequestMethod.GET)
	public ResponseEntity<List<UserVO>> goodsinsertform() {
		
		 List<UserVO> userList = artistService.aritstListForm();
		 log.info("userasd+ " + userList);
		return new ResponseEntity<List<UserVO>>(userList, HttpStatus.OK);
	}
	
	
	@PostMapping("/insert.do")
	public String addMembers(
				@RequestParam("artistFakename[]") List<String> artistFakenames,
	            @RequestParam("artistBirth[]") List<String> artistBirths,
	            @RequestParam("artistIntro[]") List<String> artistIntros,
	            @RequestParam("userProfile[]") List<MultipartFile> userProfiles,
	            @RequestParam("userNo[]") List<String> userNos,
	            @RequestParam("agId") String agId,
	            @RequestParam("agName") String agName,
	            @RequestParam("agDate") String agDate,
	            @RequestParam("agIntro") String agIntro,
	            @RequestParam("agProfile") String agProfile) {
	        
		
		  for (String name : artistFakenames) {
	            System.out.println("Artist Fakename: " + name);
	        }

	        // 아티스트 생년월일 출력
	        for (String birth : artistBirths) {
	            System.out.println("Artist Birth: " + birth);
	        }

	        // 아티스트 소개 출력
	        for (String intro : artistIntros) {
	        	System.out.println("Artist Intro: " + intro);
	        }
	        for (String no : userNos) {
	        	System.out.println("User No: " + no);
	        }

	        // 사용자 프로필 이미지 파일 이름 출력
	        for (MultipartFile file : userProfiles) {
	            if (!file.isEmpty()) {
	                System.out.println("User Profile: " + file.getOriginalFilename());
	            }
	        }

	        // ag 관련 정보 출력
	        System.out.println("AG ID: " + agId);
	        System.out.println("AG Date: " + agDate);
	        System.out.println("AG Intro: " + agIntro);
	        System.out.println("AG Profile: " + agProfile);
	        
	        
	        ArtistGroupVO artistGroupVO1 = new ArtistGroupVO();
	        
	        // 파라미터 값을 ArtistGroupVO 객체에 설정
	        artistGroupVO1.setAgId(agId);
	        artistGroupVO1.setAgName(agName);
	        artistGroupVO1.setAgDate(agDate);
	        artistGroupVO1.setAgIntro(agIntro);
	        artistGroupVO1.setAgProfile(agProfile);
	        
	        log.info("artistGroupVO1 == " + artistGroupVO1);
	        
	        
	        artistService.groupInsert(artistGroupVO1);
		
	    List<ArtistVO> artistList = new ArrayList<>();
	    
	    for (int i = 0; i < artistFakenames.size(); i++) {
	    	ArtistVO artistVO = new ArtistVO();
	    	artistVO.setArtistFakename(artistFakenames.get(i));
	    	artistVO.setArtistBirth(artistBirths.get(i));
	    	artistVO.setArtistIntro(artistIntros.get(i));
	    	artistVO.setUserNo(Integer.parseInt(userNos.get(i)));
	    	artistVO.setAgId(agId);
	    	
	    	log.info("agId 나오냐 ?" + artistVO);

//	        if (userProfiles != null && i < userProfiles.size() && !userProfiles.get(i).isEmpty()) {
//	            MultipartFile userProfile = userProfiles.get(i);
//	            try {
//	                byte[] bytes = userProfile.getBytes();
//	                artistVO.setUserProfileBytes(bytes);
//	            } catch (IOException e) {
//	                e.printStackTrace();
//	            }
//	        }

	        artistList.add(artistVO);
	    }

       
        artistService.insert(artistList);
	    return "admin/entertain/artistInsertForm";
	}
}
