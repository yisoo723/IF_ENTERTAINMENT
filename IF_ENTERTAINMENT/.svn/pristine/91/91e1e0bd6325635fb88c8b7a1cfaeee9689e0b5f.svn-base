package kr.or.ddit.service.impl.community;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import kr.or.ddit.mapper.community.ISurveyMapper;
import kr.or.ddit.service.community.ISurveyService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.community.SurveyFormVO;
import kr.or.ddit.vo.community.SurveyOptionVO;
import kr.or.ddit.vo.community.SurveyQuestionVO;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class SurveyServiceImpl implements ISurveyService {
	
	@Inject
	private ISurveyMapper surveyMapper;

	/**
	 * 설문지 폼 등록 
	 */
	@Override
	public ServiceResult insertSurvey(HttpServletRequest req, SurveyFormVO surveyFormVO) {
		ServiceResult result = null;
		
		String thumbnail = null;
		
		try {
			// 썸네일 db저장을 위한 이름을 가져오며 서버경로에도 실제로 업로드해준다.
			thumbnail = surveyFileUpload(surveyFormVO, req);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if(thumbnail != null) {
			surveyFormVO.setSfPhoto(thumbnail);	// 썸네일 경로 저장
		} else {
			log.info("### thumbnail is null");
		}
		
		int status = surveyMapper.insertSurvey(surveyFormVO);
		
		if(status > 0) {
			// 설문지가 성공적으로 등록되었다면 해당 설문지에 포함된 질문리스트를 가져와 DB에 입력한다.
			List<SurveyQuestionVO> sqList = surveyFormVO.getSurveyQuestionList();
			if(sqList != null && sqList.size() > 0) {
				for (SurveyQuestionVO surveyQuestionVO : sqList) {
					surveyQuestionVO.setSfNo(surveyFormVO.getSfNo());
					int questionStatus = surveyMapper.insertSurveyQuestion(surveyQuestionVO);
					if(questionStatus > 0) {
						// 질문이 성공적으로 등록되었다면 해당 질문에 포함된 옵션리스트를 가져와 DB에 입력한다.
						List<SurveyOptionVO> soList = surveyQuestionVO.getOptionList();
						if(soList != null && soList.size() > 0) {
							for(SurveyOptionVO surveyOptionVO : soList) {
								surveyOptionVO.setSqNo(surveyQuestionVO.getSqNo());
								surveyMapper.insertSurveyOption(surveyOptionVO);
							}
						}
					}
				}
			}
			result = ServiceResult.OK;
		} else {
			result = ServiceResult.FAILED;
		}
		
		return result;
	}

	private String surveyFileUpload(SurveyFormVO surveyFormVO, HttpServletRequest req) throws Exception {
		
		String savePath = "/resources/survey/";
		
		String saveLocate = null;
		if(surveyFormVO.getSfFile() != null) {
			String saveName = UUID.randomUUID().toString();
			saveName += "_" + surveyFormVO.getSfFile().getOriginalFilename();
			saveLocate = req.getServletContext().getRealPath(savePath);
			
			File file = new File(saveLocate);
			if(!file.exists()) {
				file.mkdirs();
			}
			
			saveLocate += saveName;
			File saveFile = new File(saveLocate);
			surveyFormVO.getSfFile().transferTo(saveFile);
			
			savePath += saveName;
			
		}
		
		return savePath;
	}

	/**
	 * 페이징 처리 및 검색결과를 위한 설문지 폼의 개수를 리턴
	 */
	@Override
	public int selectSurveyCount(PaginationInfoVO<SurveyFormVO> pagingVO) {
		return surveyMapper.selectSurveyCount(pagingVO);
	}

	/**
	 * 페이징 처리 및 검색 결과가 포함된 설문지 폼 리스트 리턴
	 */
	@Override
	public List<SurveyFormVO> selectSurveyList(PaginationInfoVO<SurveyFormVO> pagingVO) {
		return surveyMapper.selectSurveyList(pagingVO);
	}

	/**
	 * 설문지 번호를 받아서 디테일 정보를 리턴
	 */
	@Override
	public SurveyFormVO selectSurvey(int sfNo) {
		return surveyMapper.selectSurvey(sfNo);
	}

}
