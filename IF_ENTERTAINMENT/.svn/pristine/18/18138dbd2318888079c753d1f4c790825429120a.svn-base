package kr.or.ddit.service.impl.entertain;

import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.entertain.IArtistMapper;
import kr.or.ddit.service.entertain.IArtistService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.common.UserVO;
import kr.or.ddit.vo.entertain.AlbumVO;
import kr.or.ddit.vo.entertain.ArtistGroupVO;
import kr.or.ddit.vo.entertain.ArtistVO;
import kr.or.ddit.vo.entertain.AuditionRegisterVO;
import kr.or.ddit.vo.entertain.TrackListVO;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@Service
public class ArtistServiceImpl implements IArtistService {

	@Inject
	private IArtistMapper artistMapper;

	@Override
	public List<AlbumVO> albumList(String agId) {
		return artistMapper.albumList(agId);
	}

	@Override
	public List<TrackListVO> selectAlbum(int alNo) {
		return artistMapper.selectAlbum(alNo);
	}
	@Override
	public AlbumVO albumDetail(int alNo) {
		return artistMapper.albumDetail(alNo);
	}

	@Override
	public ArtistGroupVO profileList(String agId) {
		return artistMapper.profileList(agId);
	}

	@Override
	public List<ArtistVO> artistSelect(String agId) {
		return artistMapper.artistSelect(agId);
	}

	@Override
	public List<ArtistGroupVO> artistList() {
		return artistMapper.artistList();
	}

	

	@Override
	public List<ArtistVO> adminArtistList() {
		return artistMapper.adminArtistList();
	}

	@Override
	public int selectArtistListCount(PaginationInfoVO<ArtistGroupVO> pagingVO) {
		return artistMapper.selectArtistListCount(pagingVO);
	}

	@Override
	public List<ArtistGroupVO> adminList(PaginationInfoVO<ArtistGroupVO> pagingVO) {
		return artistMapper.adminList(pagingVO);
	}

	@Override
	public ServiceResult deleteArtist(HttpServletRequest req, String agId) {
		ServiceResult result = null;
		int status = artistMapper.deleteArtist(agId);
		System.out.println("232232323" + status);
		if(status > 0 ) {
			result= ServiceResult.OK;
		}else {
			result= ServiceResult.FAILED;
		}
		return result;
	}

	

	@Override
	public List<UserVO> aritstListForm() {
		return artistMapper.aritstListForm();
	}

	
	@Override
	public void groupInsert(ArtistGroupVO artistGroupVO1, HttpServletRequest req) {
		try {
			groupPhotoFileUpload(artistGroupVO1.getAgPhoto(),artistGroupVO1,req);
			artistMapper.groupInsert(artistGroupVO1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	private void groupPhotoFileUpload(MultipartFile agPhoto, ArtistGroupVO artistGroupVO1,
			HttpServletRequest req
		) throws Exception {
		
		String savePath = "/resources/upload/group/";
		
		String saveLocate = null;
		
		log.info("agPhotoagPhoto"+agPhoto);
		if(agPhoto != null) {
			String saveName = UUID.randomUUID().toString();
			saveName += "_" + artistGroupVO1.getAgPhoto().getOriginalFilename();
			saveLocate = req.getServletContext().getRealPath(savePath);
			saveName = saveName.replaceAll(" ", "_");
			
			File file = new File(saveLocate);
			if(!file.exists()) {
				file.mkdirs();
			}
			
			saveLocate += saveName;
			
			File saveFile = new File(saveLocate);
			
			artistGroupVO1.getAgPhoto().transferTo(saveFile);
			
			savePath += saveName;

			log.info("##############################savePath"+savePath);
			
			artistGroupVO1.setAgProfile(saveName);
			
		}
	}

	@Override
	public void insert(List<ArtistVO> artistList) {
		artistMapper.insert(artistList);
		
	}

	@Override
	public ArtistGroupVO artistGroupSelect(String agId) {
		return artistMapper.artistGroupSelect(agId);
	}

	@Override
	public List<ArtistVO> artistMemberSelect(String agId) {
		return artistMapper.artistMemberSelect(agId);
	}

	@Override
	public void memberInsert(ArtistVO artistVO) {
		artistMapper.memberInsert(artistVO);
	}


	@Override
	public void memberDelete(ArtistVO artistVO) {
		artistMapper.memberDelete(artistVO);
		
	}
	
	@Override
	public void groupUpdate(ArtistGroupVO artistGroupVO1, HttpServletRequest req) {
		try {
			groupPhotoFileUpload(artistGroupVO1.getAgPhoto(),artistGroupVO1,req);
			artistMapper.groupUpdate(artistGroupVO1);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void memberUpdate(List<ArtistVO> artistList, HttpServletRequest req) {
		log.info("artist ---12341234213" + artistList);
	   
	    try {
	        memberPhotoFileUpload(artistList, req);
	    } catch (Exception e) {
	        e.printStackTrace();
	    }

	    // 여기에서 artistList 내의 각 artist 객체에 대해 데이터베이스 업데이트 로직을 수행할 수 있습니다.
	    for (ArtistVO artist : artistList) {
	    	 log.info("artist ---1234" + artist);
	        try {
	           artistMapper.memberUpdate(artist);
	           artistMapper.userProfileUpdate(artist);
	           log.info("artist ---12345" + artist);
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	    }
	}

	private void memberPhotoFileUpload(List<ArtistVO> artistList, HttpServletRequest req) throws Exception {
	    String savePath = "/resources/upload/group/";

	    for (ArtistVO artist : artistList) {
	        MultipartFile userPhoto = artist.getUserPhoto();
	        if (userPhoto != null && !userPhoto.isEmpty()) {
	            String saveName = UUID.randomUUID().toString();
	            saveName += "_" + userPhoto.getOriginalFilename();
	            saveName = saveName.replaceAll(" ", "_");

	            String saveLocate = req.getServletContext().getRealPath(savePath);
	            File file = new File(saveLocate);
	            if (!file.exists()) {
	                file.mkdirs();
	            }

	            saveLocate += saveName;
	            File saveFile = new File(saveLocate);
	            userPhoto.transferTo(saveFile);

	            artist.setUserProfile(saveName); // 
	        }
	    }
	}
}
	


	


