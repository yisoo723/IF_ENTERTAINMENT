package kr.or.ddit.service.impl.entertain;

import java.io.File;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Service;

import kr.or.ddit.mapper.entertain.IIRMapper;
import kr.or.ddit.service.entertain.IIRService;
import kr.or.ddit.util.ServiceResult;
import kr.or.ddit.vo.common.PaginationInfoVO;
import kr.or.ddit.vo.entertain.IREventVO;
import kr.or.ddit.vo.entertain.IRFileAttachVO;
import kr.or.ddit.vo.entertain.IRFileVO;

@Service
public class IRServiceImpl implements IIRService {

	@Inject
	private IIRMapper irMapper;

	@Override
	public ServiceResult insertIREvent(HttpServletRequest req, IREventVO ireventVO) {
		ServiceResult result = null;
		ireventVO.setIrSchedule(ireventVO.getIrSchedule().replace(",", " "));
		int status = irMapper.insertIREvent(ireventVO);
		if(status > 0) { 	// 등록 처리가 완료되었을 때
			irMapper.insertIREventDetail(ireventVO);
			
			result = ServiceResult.OK;
		} else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	@Override
	public int selectIREventCount(PaginationInfoVO<IREventVO> pagingVO) {
		return irMapper.selectIREventCount(pagingVO);
	}

	@Override
	public List<IREventVO> selectIREventList(PaginationInfoVO<IREventVO> pagingVO) {
		return irMapper.selectIREventList(pagingVO);
	}

	@Override
	public IREventVO selectIREvent(int bfNo) {
		return irMapper.selectIREvent(bfNo); 
	}


	
	// IR 파일
	@Override
	public int selectFileCount(PaginationInfoVO<IRFileVO> pagingVO) {
		return irMapper.selectFileCount(pagingVO);
	}

	@Override
	public List<IRFileVO> selectIRFileList(PaginationInfoVO<IRFileVO> pagingVO) {
		return irMapper.selectIRFileList(pagingVO);
	}


	@Override
	public ServiceResult insertIRFile(HttpServletRequest req, IRFileVO irFileVO) {
		ServiceResult result = null;
		
		// IR File 게시판 등록
		int status = irMapper.insertIRFile(irFileVO);
		if(status > 0) {
			 List<IRFileAttachVO> fileList = irFileVO.getAttachFileList();
			 
			 try {
				 irFileUpload(fileList, irFileVO.getBfNo(), req);
			 } catch (Exception e) {
				 e.printStackTrace();
			 }
			 
			 result = ServiceResult.OK;
		} else {
			result = ServiceResult.FAILED;
		}
		return result;
	}

	// ir 파일 업로드 메서드
	private void irFileUpload(List<IRFileAttachVO> fileList, int bfNo, HttpServletRequest req) {
		String savePath = "/resources/irFile/";
		
		if(fileList != null && fileList.size() > 0) {
			for (IRFileAttachVO irFileAttachVO : fileList) {
				String savedName = UUID.randomUUID().toString();
				savedName += "_" + irFileAttachVO.getBaName();
				String saveLocate = req.getServletContext().getRealPath(savePath);
				File file = new File(saveLocate);
				if(!file.exists()) {	// 업로드를 하기 위한 폴더 구조가 존재하지 않을 때
					file.mkdirs(); 		// 폴더 생성
				}
				
				saveLocate += savedName; // 실제 업로드할 경로
				
				irFileAttachVO.setBfNo(bfNo);
				irFileAttachVO.setBaSavepath(saveLocate);
				irMapper.insertIRAttachFile(irFileAttachVO); // 파일 테이블 insert
				
			}
		}
	}
}
